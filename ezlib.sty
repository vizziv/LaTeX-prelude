%%%%%%%%%%%%%
%%% ezlib %%%
%%%%%%%%%%%%%


%-- README --%


% # ezlib

% This package can be used in two main ways

% - Enable all of features with the `default` option, then disable one by one
%   - Best for new documents of class article, book, report, or acmart
% - Enable features one by one
%   - Best when integrating into an existing document
%   - Best when using a class other than article, book, report, or acmart
% - If no options are passed, the package should do (almost) nothing
%   - The "almost": loading kvoptions and etoolbox, and defining some private commands

% Each of the features below can be enabled or disabled with an option

% - The option always has the same name as the feature
% - How to enable/disable a boolean feature
%   - Enable xyz: pass `xyz` or `xyz=true` to this package
%   - Disable xyz: pass `xyz=false` to this package
% - How to enable/disable a non-boolean feature
%   - Enable xyz: pass `xyz=default`, or pass another value
%     - Can use `xyz=true` as alias for `xyz=default`, but this is discouraged
%   - Disable xyz: pass `xyz=none`
%     - Can use `xyz=false` as alias for `xyz=none`, but this is discouraged
% - How to enable/disable many features at once
%   - The default is set by an option `default`, which can have one of two values
%     - `default=minimal`: everything disabled by default
%     - `default=maximal`: everything enabled by default
%   - Shortcuts
%     - Leaving the `default` option absent is equivalent to `default=minimal`
%     - Passing `default` with no value set is equivalent to `default=maximal`
%   - With `default=maximal`, can still disable with `xyz=false` or `xyz=none`
% - Some features have further options associated with them
%   - See details below

% Full feature list, with non-boolean features marked:

% - ezlist
% - ezeq
% - ezrestate
% - delimiters
% - notation
% - cleveref
% - theorems
% - algorithm
% - mathic
% - packages
% - font (non-boolean)
% - number within (non-boolean)
% - margin (non-boolean)
% - headings (non-boolean)

% Throughout, many packages are loaded with options

% - There are two ways to change/disable options for a package `pkg`
%   - Load pkg before this package
%   - Call `\PassOptionsToPackage{options}{pkg}` before this package
%     - `\PassOptionsToPackage{}{pkg}` will prevent options
% - To clarify, the \PassOptionsToPackage behavior is specific to this package
%   - Usually, \PassOptionsToPackage adds additional options
%   - But this package detects if \PassOptionsToPackage has been called already
% - Random hack: `\PassOptionsToPackage{no ezlib}{pkg}` prevents pkg from loading
%   - This could break stuff, but should work for things like natbib and microtype


% ## Feature: ezlist

% Boolean feature (enabled by `default=maximal`)

% Provides a single macro, `\*`, for making lists

% Example usage:

% ```
% \* hello
% \* world
% \** use multiple * for sublists
% \** like this
% \* back to top level
% \* use a / to end the list
% \*/
% ```

% Can also use an optional argument to use numbers/letters, e.g.

% ```
% \*[(a)] labeled (a)
% \* labeled (b)
% \** no label in this sublist
% \* labeled (c)
% \**[(i)] labeled (i)
% \** labeled (ii)
% \*/
% ```

% ### Advanced usage

% More generally, use `[]` to pass any options the enumitem package supports

% Optional feature: explicit start/end:

% - Explicit start: use `\*[...]`, `\**[...]`, etc. with no text after.
%   - Should be followed by another `\*`, `\**`, etc.
%   - This is useful if you want to pass options in a separate line
% - Explicit end: use `\**/`, `\***/`, etc.
%   - This lets you have a sublist in the middle of an item

% Example:

% ```
% \*[(a), afterheading]
% \* this is the first item, labeled (a)
% \** the list options got their own line
% \** see below for more about the \texttt{afterheading} option
% \* this one is (b), and there's a sublist
% \** with
% \** some
% \** stuff
% \**/ but now we resume item (b) from the outer list
% \* before finally going to (c)
% \* more details about explicit begin
% \** you need to pass options with [] for an explicit begin
% \***
% \*** so the line immediately above this appears
% \** but passing an empty list of options counts as passing options, so
% \***[]
% \*** so the line immediately above this is omitted
% \** edge case: when an explicit begin is immediately followed by an explicit end\dots
% \***[]
% \***/ \dots\ the list has a single empty item
% \*/
% ```

% Additional notes:

% - The environment `\*` uses is called `ezlist`
%   - For modifying options with `\setlist`, cleveref name, etc.
% - This package loads enumitem with option `shortlabels` and does some other formatting
%   - See top of guide for how to disable package options
% - This package defines an enumitem key `afterheading` for lists after inline headings
%   - It ensures the list starts on a new line after the heading
%   - It prevents page breaks between the heading and the list
%   - Main use case is lists that appear at the start of a theorem/lemma/etc.

% ### Subfeature: subenv (disable with `ezlist subenv=false`)

% Also introduces enumitem key `subenv` for referencing parts of therems/lemmas/etc.

% - Works with ezlist, but unfortunately not other list types
% - Usage: use `\*[subenv]` inside a theorem/lemma/etc., then use `\label` within items
%   - Result: `\cref` for those labels yields a `subtheorem` reference, e.g. "Theorem 1.2(c)"
% - A few options to refer to just the part label, e.g. just "(c)"
%   - `\subref{lbl}`, assuming subcaption package is loaded
%     - The subcaption package's options might affect how it looks
%   - `\ref{sub@lbl}`, where `lbl` is the original label
%     - `\cref` and `\Cref` should work, too
% - Supported usage
%   - Should work with an ezlist inside any environment whose name is a counter
%   - But does not work with lists other than ezlist
%   - Should only be used with top-level lists

% Editing subenv label appearance:

% - Redefine the `\subenvFormatLabel` command to change the item labels
%   - Should take one argument, which is the counter name
%   - Default is `(\alph{#1})`, yielding (a), (b), (c)...
%   - Example: changing to `(\roman{#1})` would yield (i), (ii), (iii)...
% - Redefine the `\subenvFormatRef` command to change what the references look like
%   - Should take one argument, which is the counter name
%   - Default is to do whatever `\subenvFormatLabel` does


% ## Feature: ezeq

% Boolean feature (enabled by `default=maximal`)

% Makes `\[` and `\]` a (slightly) smarter equation interface

% - Automatically chooses between equation, align, and gather
%   - Conservative choice based on seeing whether `&` or `\\` appears in the text
% - Automatically numbers only labeled equations, if desired
%   - If using `\tag`, put it right after `\label`, as in `\label{...} \tag{...}`
% - Enables `\allowdisplaybreaks` inside the `\[ \]`
%   - If it appears anywhere in the `\[ \]`, it applies to the whole thing
%   - It is local to the `\[ \]` in which it appears
%   - The optional argument of `\allowdisplaybreaks` is not supported
%   - Remember that LaTeX provies `\\*` for non-breakable newlines
% - Automatically inserts `\qedhere` if immediately before `\end{proof}`
%   - When `ezlist` is activated, also inserts it before `\*/ \end{proof}`
%   - Won't do anything if there's already a `\qedhere`
%   - Put `\noAutoQed` somewhere in the equation to disable this for one equation
%     - `\noAutoQed` has no other effect
%   - Use `ezeq auto qed=false` to disable this globally
% - Also slightly changes how `\qedhere` behaves
%   - The new version is simpler and a bit less buggy for equation numbers on the right
%   - But the new version is incompatible with equation numbers on the left
%   - If this package detects equation numbers are on the left, will use the old version

% Other configuration:

% - `ezeq number labeled` (default): only number labeled equations
%   - Equivalent to `ezeq number labeled=true` or `ezeq number all=false`
% - `ezeq number all`: number all equations
%   - Equivalent to `ezeq number labeled=false` or `ezeq number all=true`
% - `ezeq auto qed` (boolean): whether to automatically place `\qedhere` in equations when at the end of a proof
%   - Defaults to true


% ## Feature: ezrestate

% Boolean feature (enabled by `default=maximal`)

% Simple interface for thmtools's restatable theorems

% - `\restatably` or `\restatably*`: makes any theorem/lemma/etc. restatable
%   - Usage: `\restatably \begin{theorem} \label{lbl} ... \end{theorem}`
%     - Spaces or newlines are okay
%   - The theorem/lemma/etc. must start with a \label
% - `restate` or `\restate*`: restates a `\restatably` stated theorem/lemma/etc.
%   - Usage: `\restate*{lbl}` or `\restate*\ref{lbl}`
%     - The `\ref` syntax is for convenient autocomplete, e.g. on Overleaf
%   - Can be used multiple times

% Starred vs. not starred

% - Both `\restatably` and `\restate` can be starred (followed by `*`) or unstarred
%   - Unstarred indicates the "main version", on which the numbering is based
%   - Starred indicates that numbers should be copied from the main version
% - Each label should appear once unstarred, and otherwise starred
%   - Either the `\restatably` or a `\restate` can be the starred one
% - The star always appears immediately after the macro
%   - E.g. `\restatably* \begin{...}` or `\restate*\ref{...}`


% ## Feature: delimiters

% Boolean feature (enabled by `default=maximal`)

% Provides different "group" macros for sizing parentheses and similar

% - `\gp{x}`: normal size
% - `\gp*{x}`: automatically sized using \left/\right
% - `\gp[size]{x}`: manually sized, where `size` is one of `\big`, `\Big`, `\bigg`, or `\Bigg`

% See the mathtools `\DeclarePairedDelimiter` documentation for more details

% Variants of `\gp`:

% - `\gp` or `\pgp`: `()`
% - `\sqgp` or `\bgp`: `[]`
% - `\curlgp` or `\Bgp`: `\{\}`
% - `\pbgp`: `(]`
% - `\bpgp`: `[)`
% - `\vgp`: `||`
% - `\Vgp`: `\|\|`
% - `\agp`: `\langle\rangle`
% - `\floor`: `\lfloor\rfloor`
% - `\ceil`: `\lceil\rceil`

% Separators that automatically scale:

% - `\mid`: `|`
% - `\Mid`: `\|`

% Generic version:

% - `\lr`: like `\gp`, but after the optional `*`, takes delimiters as input
% - `\lrStarAfter`: like `\lr`, but takes the delimiters first, then checks for `*`
% - Limitation: neither `\lr` nor `\lrStarAfter` supports manual sizing
% - Examples:
%   - `\lr(){...}` is like `\gp{...}`
%   - `\lr*(){...}` is like `\gp*{...}`
%   - `\lrStarAfter(){...}` is like `\gp{...}`
%   - `\lrStarAfter()*{...}` is like `\gp*{...}`
%   - Delimiters need not be the same, e.g. `\lr*[){...}` is like `\bpgp*{...}`
% - Intended usage
%   - `\lr` is for direct usage in equations
%   - `\lrStarAfter` is useful as the end of a macro definition
%     - But the `\gp` family is even better, because it supports manual sizing


% ## Feature: notation

% Boolean feature (enabled by `default=maximal`)

% Various math notation shortcuts and conventions

% Provides `\lr` and `\lrStarAfter` from delimiters above (but not the others)

% Probability (best with delimiters option on, too):

% - `\P`, `\E`, and `\Var`: have interface like delimiters
%   - But they also support subscripts/superscripts and primes
%   - If delimiters option isn't on, then manual sizing doesn't work
% - `\given`: synonym for `\mid`
% - Example: `\E_{X \sim \pi}*{\frac{1}{2} X^2 \given X > 3}`
% - Change appearance with the following two options
%   - `probability style` (default: `probability style=bf`)
%     - Also supported: `bb`, `rm`, `sf`, and any X where a `\mathX` command exists
%   - `probability delim` (default: `probability delim=sq`)
%     - Also supported: `p`, `curl`, and any X where an `\Xgp` command exists
%       - Without delimiters loaded, supports `p`, `sq`/`b`, and `curl`/`B`
%     - Also supported: `[]`, `()`, and any valid followup to `\lrStarAfter`
%       - Limitation: manual sizing won't work
% - `\DeclareProbabilityCommand`: declare new commands that work like `\P`
%   - Example: `\DeclareProbabilityCommand{\Cov}{Cov}`

% Shortcuts for letters in different math fonts:

% - `\bbA`, ..., `\bbZ`: short for `\mathbb{A}`, ..., `\mathbb{Z}` (uppercase only)
% - `\calA`, ..., `\calZ`: short for `\mathcal{A}`, ..., `\mathcal{Z}` (uppercase only)
% - `\bfA`, ..., `\bfz`: short for `\mathbf{A}`, ..., `\mathbf{z}` (lowecase and uppercase)
% - `\sfA`, ..., `\sfz`: short for `\mathsf{A}`, ..., `\mathsf{z}` (lowecase and uppercase)

% Other:

% - `\1`: indicator function `\mathbb{1}`
% - `\d`: differential symbol, use as `\d x` or `\d{x}`
% - `\epsilon` and `\phi`: now refer to `\varepsilon` and `\varphi`
%   - Use `\LaTeXepsilon` and `\LaTeXphi` for old versions
% - `\argmin`, `\argmax`, `\liminf`, `\limsup`: math operators
% - `\widebar`: like `\widetilde`, and a little nicer than `\overline`
%   - Omitted if another package defines it first, e.g. newtxmath


% ## Feature: cleveref

% Boolean feature (enabled by `default=maximal`)

% Loads the cleveref package and a bit more

% - Uses `capitalize` option by default
%   - See top of guide for how to disable package options
% - `\cCrefname`: simultaneous `\crefname` and `\Crefname`
% - Allows spaces in comma-separated list of labels in `\cref` and `\Cref`

% Mechanism for registering alternate versions of names:

% - `\crefShortened`: wrap around a `\crefname` or similar to register a shortened version
%   - Example: `\crefShortened{\cCrefname{theorem}{Thm.}{Thms.}}`
%   - To omit the final "and": `\crefShortened{\def\creflastconjunction{, }\def\crefpairconjunction{, }}`
% - `\crefShorten`: redefine all names using the shortened versions
%   - This just executes all the code registered with `\crefShortened`
%   - Redefinitions are local to any enclosing group


% ## Feature: theorems

% Boolean feature (enabled by `default=maximal`)

% Declares a default set of theorem environments

% Theorem style synonyms, with support for class-specific analogues:

% - `\ezlibPlain`: plain or class-specific analogue (e.g. acmplain for acmart)
% - `\ezlibDefinition`: definition or analogue
% - `\ezlibRemark`: remark or analogue
%   - For some classes, e.g. acmart, this is the same as `\ezlibDefinition`
% - If any of the above are already defined, they will not be redefined
%   - This allows for changing styles by redefining the commands

% Other:

% - `\begin{case}[...] ... \end{case}`: cases in a proof
% - `\noqed`: suppress the QED at the end of a proof
% - `\cleartheorem`: undefines a theorem environment and its counter


% ## Feature: algorithm

% Boolean feature (enabled by `default=maximal`)

% Loads the alrogithm package and slightly tweaks algorithm formatting

% - Passes the value of `number within` as an option to the algorithm package
%   - See top of guide for how to disable package options


% ## Feature: mathic

% Boolean feature (enabled by `default=maximal`)

% Corrects spacing around inline math in italic text

% - Redefines `$` in terms of `\( \)` and `\[ \]`
%   - `$ $` becomes `\( \)`, possibly with an extra italic space tweak after (see below)
%   - `$$ $$` becomes `\[ \]`
%   - This changes the character code of `$`
% - Attempts compatibility with tikz
%   - Specifically, restores the character code of `$` within tikzpicture
% - Attempts to also correct spacing after, but it's kind of a hack
%   - Use `mathic after=false` to disable this
%   - In contrast, spacing before is handled by mathtools
%   - This applies only to `$ $`, not `\( \)`


% ## Feature: packages

% Boolean feature (enabled by `default=maximal`)

% Loads various packages, some with options

% - booktabs
% - calc
% - caption, with options `font=small, labelfont=bf, labelsep=period`
% - graphicx
% - microtype
% - natbib, with options `square, numbers, sort&compress`
% - subcaption, with options `font=small, labelformat=simple`
%   - If options are passed, also tweaks `\thesubfigure` to include parentheses
%   - If ezlist subenv is enabled, uses `\subenvFormatLabel` in `\thesubfigure`
% - Not a package, but also turns on `\frenchspacing`

% See top of guide for how to disable package options


% ## Feature: font

% Non-boolean feature (behavior under `default=maximal` described below)

% Changes fonts used throughout the document

% Possible values:

% - `font=none`: don't change any fonts
% - `font=libertine`: use font set based around Libertine and Biolinum
% - `font=charter`: use font set based around Charter and Vera Sans
% - `font=palatino`: use font set based around Palatino
% - Unless `font=none`, also loads fontenc with option `T1`

% Other configuration:

% - `ttfont=inconsolata`: use Inconsolata (default) for monospaced text
% - `ttfont=sourcecodepro`: use Source Code Pro for monospaced text

% Behavior with `default=maximal`:

% - If a known built-in LaTeX class is loaded, default to `font=libertine`
%   - These are: article, report, book
% - Otherwise, conservatively default to `font=none`
%   - This avoids conflicts with journal/conference class files
% - Either way, can be manually overridden by setting font explicitly


% ## Feature: number within

% Non-boolean feature (behavior under `default=maximal` described below)

% Selects what level numbering of theorems/equations/figures/etc. occurs within

% Valid options:

% - `number within=none`: use global numbering
%   - Default under `default=minimal`
% - `number within=default`: number within chapters or sections
%   - Uses `chapter` if the document has chapters, `section` otherwise
%   - This is the default under `default=maximal`
% - Any other setting: number within the given environment
%   - E.g. `number within=section`, `number within=subsection`, etc.


% ## Feature: margin

% Non-boolean feature (behavior under `default=maximal` described below)

% Sets the page margins using the geometry package

% - If absent or set to `margin=none`, has no effect
% - If set to any other value, loads geometry with that margin value
%   - To set more complex margins, load geometry before this package

% Behavior with `default=maximal`:

% - If a known built-in LaTeX class is loaded, default to `margin=1.25in`
%   - These are: article, report, book
% - Otherwise, conservatively default to `margin=none`
%   - This avoids conflicts with journal/conference class files
% - Either way, can be manually overridden by setting margin explicitly


% ## Feature: headings

% Non-boolean feature (behavior under `default=maximal` described below)

% Formats section titles, headers, and more

% Valid options:

% - `headings=none`: leave LaTeX defaults
%   - Default under `default=minimal`
% - `headings=default`: choose between `fancy` and `none`
%   - If a known built-in LaTeX class is loaded, use `fancy`
%   - Otherwise, use `none`
%   - This is the default under `default=maximal`
% - `headings=fancy`: reformat section titles and headers
%   - Section titles are styled in sans if the font has a nice sans pairing
%   - Headers choose between two styles depending on if `\chapter` is defined
%   - E.g. `number within=section`, `number within=subsection`, etc.
% - `headings=inline`: use inline subsection titles
%   - E.g. for short documents with a strict page limit
%   - Equivalent to using `headings=fancy` and `headings inline=true` (see below)

% Other configuriation:

% - `headings sf` (boolean): set to true to make headings sans
%   - Defaults to true if the font has a nice sans pairing, false otherwise
% - `headings inline` (boolean): use inline subsection and lower-level headings
%   - Defaults to false, but set to true by `headings=inline`
% - `headings inline period` (boolean): if using inline headings, add period after heading
%   - Defaults to true


%-- end README --%



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Package setup and options %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\NeedsTeXFormat{LaTeX2e}[1994/06/01]
\ProvidesPackage{ezlib}[2023/12/30 Ziv's LaTeX Library]

\RequirePackage{kvoptions}
\RequirePackage{etoolbox}

% Options for main features
\DeclareStringOption[minimal]{default}[maximal]
\AddToKeyvalOption*{default}{
  \ifdefstring{\ezlib@default}{maximal}{
    \ezlib@ezlisttrue
    \ezlib@ezeqtrue
    \ezlib@ezrestatetrue
    \ezlib@delimiterstrue
    \ezlib@notationtrue
    \ezlib@clevereftrue
    \ezlib@theoremstrue
    \ezlib@algorithmtrue
    \ezlib@mathictrue
    \ezlib@packagestrue
    \renewcommand{\ezlib@font}{default}
    \renewcommand{\ezlib@numberwithin}{default}
    \renewcommand{\ezlib@margin}{default}
    \renewcommand{\ezlib@headings}{default}
  }{}
}
\DeclareBoolOption[false]{ezlist}
\DeclareBoolOption[false]{ezeq}
\DeclareBoolOption[false]{ezrestate}
\DeclareBoolOption[false]{delimiters}
\DeclareBoolOption[false]{notation}
\DeclareBoolOption[false]{cleveref}
\DeclareBoolOption[false]{theorems}
\DeclareBoolOption[false]{algorithm}
\DeclareBoolOption[false]{mathic}
\DeclareBoolOption[false]{packages}
\DeclareStringOption[none]{font}[default]
\DeclareStringOption[none]{numberwithin}[default]
\DeclareStringOption[none]{margin}[default]
\DeclareStringOption[none]{headings}[default]

% Options for ezlist
\DeclareBoolOption[true]{ezlistautoqed}
\DeclareBoolOption[true]{ezlistsubenv}

% Options for ezeq
\DeclareBoolOption[true]{ezeqnumberlabeled}
\DeclareComplementaryOption{ezeqnumberall}{ezeqnumberlabeled}
\DeclareBoolOption[true]{ezeqautoqed}

% Options for font
\DeclareStringOption[inconsolata]{ttfont}

% Options for notation
\DeclareStringOption[sq]{probabilitydelimiter}
\DeclareStringOption[bf]{probabilitystyle}

% Options for mathic
\DeclareBoolOption[true]{mathicafter}
\DeclareStringOption[0.05em]{mathicafterkern}

% Options for headings
\DeclareStringOption[default]{headingssf}[true]
\DeclareBoolOption[false]{headingsinline}
\DeclareBoolOption[true]{headingsinlineperiod}

\ProcessLocalKeyvalOptions*

% Process "xyz=true" and "xyz=false" aliases for non-boolean options
\newcommand{\ezlib@ProcessTrueFalseAlias}[1]{
  \ifcsstring{ezlib@#1}{false}{\csdef{ezlib@#1}{none}}{}
  \ifcsstring{ezlib@#1}{true}{\csdef{ezlib@#1}{default}}{}
}
\ezlib@ProcessTrueFalseAlias{font}
\ezlib@ProcessTrueFalseAlias{numberwithin}
\ezlib@ProcessTrueFalseAlias{margin}
\ezlib@ProcessTrueFalseAlias{headings}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Required packages and general setup %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newrobustcmd{\ezlib@RequirePackageWithOptions}[3][]{%
  \ifcsdef{opt@#3.\@pkgextension}{
    \ifcsstring{opt@#3.\@pkgextension}{noezlib}{}{
      \RequirePackage{#3}
    }
  }{
    \PassOptionsToPackage{#2}{#3}
    \RequirePackage{#3}
    #1
  }
}

\newrobustcmd{\ezlib@RequirePackage}[1]{%
  \ezlib@RequirePackageWithOptions{}{#1}
}

\ifboolexpr{
  bool{ezlib@ezeq}
  or bool{ezlib@ezrestate}
  or bool{ezlib@delimiters}
  or bool{ezlib@notation}
  or bool{ezlib@cleveref}
  or bool{ezlib@theorems}
}{
  \ezlib@RequirePackage{amsmath}
  \ezlib@RequirePackage{amsthm}

  %-- compatibility: acmart --%
  \ifboolexpr{
    test{\@ifclassloaded{acmart}}
    or test{\ifdefstring{\ezlib@font}{charter}}
  }{}{%
    \ezlib@RequirePackage{amsfonts}
    \ezlib@RequirePackage{amssymb}
  }
  %-- end compatibility --%

  \ezlib@RequirePackageWithOptions{hidelinks}{hyperref}
}{}

\ifboolexpr{ bool{ezlib@ezlist} or bool{ezlib@packages} }{
  \ezlib@RequirePackageWithOptions{shortlabels}{enumitem}
}{}

\ifboolexpr{
  bool{ezlib@ezeq}
  or (bool{ezlib@ezlist} and bool{ezlib@ezlistsubenv})
}{
  \ezlib@RequirePackage{xstring}
}{}

\ifbool{ezlib@cleveref}{
  \ezlib@RequirePackageWithOptions{capitalize}{cleveref}
}{}

\ifbool{ezlib@ezrestate}{
  \ezlib@RequirePackage{thm-restate}
  \ezlib@RequirePackage{refcount}
}{}

\ifboolexpr{
  bool{ezlib@delimiters}
  or bool{ezlib@mathic}
}{
  \ezlib@RequirePackage{mathtools}
}

\ifbool{ezlib@notation}{
  \ezlib@RequirePackage{mathcommand}
}{}


%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Feature: packages %%%
%%%%%%%%%%%%%%%%%%%%%%%%%

\ifbool{ezlib@packages}{
  \ezlib@RequirePackage{booktabs}
  \ezlib@RequirePackage{calc}
  \ezlib@RequirePackageWithOptions{font=small, labelfont=bf, labelsep=period}{caption}
  \ezlib@RequirePackage{graphicx}
  \ezlib@RequirePackage{microtype}
  \ezlib@RequirePackageWithOptions{square, numbers, sort&compress}{natbib}
  \ezlib@RequirePackageWithOptions[{
    \ifdef{\subenvFormatLabel}{
      \renewcommand{\thesubfigure}{\subenvFormatLabel{subfigure}}
    }{
      \renewcommand{\thesubfigure}{(\alph{subfigure})}
    }
  }]{font=small, labelformat=simple}{subcaption}
  \ezlib@RequirePackageWithOptions{rgb}{xcolor}

  \frenchspacing
}{}


%%%%%%%%%%%%%%%%%%%%%
%%% Feature: font %%%
%%%%%%%%%%%%%%%%%%%%%

% Deciding which font to use
\ifdefstring{\ezlib@font}{default}{
  \ifboolexpr{
    test{\@ifclassloaded{article}}
    or test{\@ifclassloaded{book}}
    or test{\@ifclassloaded{report}}
  }{
    \renewcommand{\ezlib@font}{libertine}
  }{
    \renewcommand{\ezlib@font}{none}
  }
}{}

\ifdefstring{\ezlib@font}{none}{}{
  \ezlib@RequirePackageWithOptions{T1}{fontenc}
}

% Use sans in titles? (For headings feature)
\newbool{ezlib@headings@sf}
\boolfalse{ezlib@headings@sf}

% Loading the fonts
% TODO: should we avoid "\PassOptionsToPackage" because it's our hacky disable switch?
\ifdefstring{\ezlib@font}{libertine}{
  \ezlib@RequirePackageWithOptions{tt=false}{libertine}
  \PassOptionsToPackage{scaled=0.95, varqu}{zi4}
  \PassOptionsToPackage{scaled=0.9025}{sourcecodepro}
  \ezlib@RequirePackageWithOptions{libertine}{newtxmath}
  \booltrue{ezlib@headings@sf}
}{}
\ifdefstring{\ezlib@font}{charter}{
  \ezlib@RequirePackageWithOptions{charter, cal=cmcal}{mathdesign}
  \PassOptionsToPackage{scaled=0.95}{sourcecodepro}
  \ezlib@RequirePackage{berasans}
  \booltrue{ezlib@headings@sf}
}{}
\ifdefstring{\ezlib@font}{palatino}{
  \PassOptionsToPackage{scaled=0.95}{sourcecodepro}
  \ezlib@RequirePackage{newpxtext}
  \ezlib@RequirePackage{newpxmath}
}{}
\ifdefstring{\ezlib@font}{none}{}{
  \ifdefstring{\ezlib@ttfont}{sourcecodepro}{
    \ezlib@RequirePackage{sourcecodepro}
  }{
    \ezlib@RequirePackageWithOptions{varqu}{zi4}
  }
}

\ifboolexpr{
  test{\ifdefstring{\ezlib@headingssf}{true}}
  or test{\ifdefstring{\ezlib@headingssf}{false}}
}{
  \setbool{ezlib@headings@sf}{\ezlib@headingssf}
}{}

% Actually part of notation, but needs to be loaded after font stuff
\ifbool{ezlib@notation}{
  \ezlib@RequirePackageWithOptions{bb=stixtwo}{mathalpha}
}{}


%%%%%%%%%%%%%%%%%%%%%%%
%%% Feature: margin %%%
%%%%%%%%%%%%%%%%%%%%%%%

\ifdefstring{\ezlib@margin}{default}{
  \ifboolexpr{
    test{\@ifclassloaded{article}}
    or test{\@ifclassloaded{book}}
    or test{\@ifclassloaded{report}}
  }{
    \renewcommand{\ezlib@margin}{1.25in}
  }{
    \renewcommand{\ezlib@margin}{none}
  }
}{}

\ifdefstring{\ezlib@margin}{none}{}{
  \ezlib@RequirePackageWithOptions{margin=\ezlib@margin}{geometry}
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Feature: number within %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\ifdefstring{\ezlib@numberwithin}{default}{
  \ifundef{\c@chapter}{
    \renewcommand{\ezlib@numberwithin}{section}
  }{
    \renewcommand{\ezlib@numberwithin}{chapter}
  }
}{}

\ifdefstring{\ezlib@numberwithin}{none}{
  \renewcommand{\ezlib@numberwithin}{}
}{}

\ifdefempty{\ezlib@numberwithin}{}{
  \AtBeginDocument{%
    \numberwithin{equation}{\ezlib@numberwithin}%
    \numberwithin{figure}{\ezlib@numberwithin}%
    \numberwithin{table}{\ezlib@numberwithin}%
  }
}


%%%%%%%%%%%%%%%
%%% Helpers %%%
%%%%%%%%%%%%%%%

% Test if a string is in a comma-separated list
% No spaces around the commas!
\newcommand{\ezlib@ifstringin}[2]{\IfSubStr{,#2,}{,#1,}}

% Test if we're at the end of one of many environments
% #1 should be the list of environments, separated by commas (no spaces!)
% Limitation: will be buggy for environment names with commas
\newrobustcmd{\ezlib@noezlist@ifAtEnd}[3]{%
  \@ifnextchar{\end}{%
    \ezlib@noezlist@ifAtEnd@go{#1}{#2}{#3}%
  }{%
    #3%
  }%
}
\def\ezlib@noezlist@ifAtEnd@go#1#2#3\end#4{%
  \ezlib@ifstringin{#4}{#1}{#2}{#3}\end{#4}%
}

\newrobustcmd{\ezlib@ifnextchar@gobble}[3]{%
  \@ifnextchar{#1}{\@firstoftwo{#2}}{#3}%
}%

% Test if we're at the end of a proof
% Defining a dedicated command to make it easier to redfine
% Example: `\renewcommand{\ezlib@ifAtEndProof}{\ezlib@ifAtEnd{proof,solution}}`
\newcommand{\ezlib@ifAtEndProof}{\ezlib@ifAtEnd{proof}}

% Used to tell cleveref what section/chatper/etc. an equation or subtheorem is part of
% TODO: Can we avoid relying on `\ezlib@numberwithin`?
% (It might require introspection on the definition of `\theequation`, etc., so seems hard)
\ifdefempty{\ezlib@numberwithin}{
  \newcommand{\ezlib@crefPrefix}{}
}{
  \newcommand{\ezlib@crefPrefix}{\arabic{\ezlib@numberwithin}}
}


%%%%%%%%%%%%%%%%%%%%%%%
%%% Feature: ezlist %%%
%%%%%%%%%%%%%%%%%%%%%%%

\ifezlib@ezlist


%%% Implementation of \*

% Keep \* as it is in math mode
\let\ezlib@ezlist@oldstar\*
\protected\def\*{\ifbool{mmode}{\ezlib@ezlist@oldstar}{\ezlib@ezlist@item}}

\newlist{ezlist}{enumerate}{8}
\setlist[ezlist,1]{label=\labelitemi}
\setlist[ezlist,2]{label=\labelitemii}
\setlist[ezlist,3]{label=\labelitemiii}
\setlist[ezlist,4]{label=\labelitemiv}
\setlist[ezlist,5]{label=\labelitemi}
\setlist[ezlist,6]{label=\labelitemii}
\setlist[ezlist,7]{label=\labelitemiii}
\setlist[ezlist,8]{label=\labelitemiv}

\newcounter{ezlib@ezlist@prev}
\setcounter{ezlib@ezlist@prev}{0}

\newcounter{ezlib@ezlist@this}
\setcounter{ezlib@ezlist@this}{1}

\newcounter{ezlib@ezlist@diff}
\setcounter{ezlib@ezlist@diff}{0}

\newtoggle{ezlib@ezlist@prevempty}
\togglefalse{ezlib@ezlist@prevempty}

% Main entry point called directly by \*
% Starts by counting "*"s
\newrobustcmd{\ezlib@ezlist@item}{%
  \@ifstar{\ezlib@ezlist@star}{\ezlib@ezlist@nostar}%
}

\newrobustcmd{\ezlib@ezlist@star}{%
  \addtocounter{ezlib@ezlist@this}{1}%
  \ezlib@ezlist@item%
}

\newcommand{\ezlib@ezlist@typeDefault}{{ezlist}[before=\@nmbrlistfalse]}

\newrobustcmd{\ezlib@ezlist@nostar}{%
  \let\ezlib@ezlist@type\ezlib@ezlist@typeDefault%
  \ifnumcomp{\value{ezlib@ezlist@this}}{>}{\value{ezlib@ezlist@prev}}{%
    \@ifnextchar{[}{%
      % This a new sublist with parameters, so store them in \ezlib@ezlist@type
      \ezlib@ezlist@settype
    }{%
      % This a new sublist, but without parameters
      \ezlib@ezlist@checkend%
    }%
  }{%
    % This not a new sublist
    \ezlib@ezlist@checkend%
  }%
}

% Start a new sublist with parameters
\def\ezlib@ezlist@settype[#1]{%
  \def\ezlib@ezlist@type{{ezlist}[#1]}%
  \ezlib@ezlist@checkempty{}%
}

% Check if the first line of a new sublist with parameters is empty
% If it is, then we omit the \item
% #1 is either blank or \par
\newrobustcmd{\ezlib@ezlist@checkempty}[1]{%
  \ezlib@ifnextchar@gobble{\par}{%
    \ezlib@ezlist@checkempty{#1\par}%
  }{%
    \@ifnextchar{\*}{%
      \ezlib@ezlist@go{\toggletrue{ezlib@ezlist@prevempty}}{}{#1}%
    }{%
      \ezlib@ezlist@go{}{\item}{#1}%
    }%
  }%
}

% Check for /, which indicates the end of a list
\newrobustcmd{\ezlib@ezlist@checkend}{%
  \ezlib@ifnextchar@gobble{/}{%
    % We want to end a list, but is there actually a list to end?
    \ifnumcomp{\value{ezlib@ezlist@this}}{>}{\value{ezlib@ezlist@prev}}{%
      % There is not, so issue a warning and ignore this line
      \PackageError{ezlist}{attempted to end easy list at too high a level}{}%
      \setcounter{ezlib@ezlist@this}{1}%
    }{%
      % There is, so end the list without adding an \item
      \addtocounter{ezlib@ezlist@this}{-1}%
      \ezlib@ezlist@end%
    }%
  }{%
    % We're not ending a list
    \ezlib@ezlist@go{}{\item}{}%
  }%
}

\ifbool{ezlib@ezlistautoqed}{%
  \newrobustcmd{\ezlib@ezlist@end}{%
    \ezlib@ifAtEndProof{%
      \qedhere%
      \ezlib@ezlist@go{}{}{}%
    }{%
      \ezlib@ezlist@go{}{}{}%
    }%
  }%
}{%
  \newrobustcmd{\ezlib@ezlist@end}{\ezlib@ezlist@go{}{}{}}%
}

% #1 goes before the potential \item
% #2 is the potential \item: it's either blank or \item
% #3 goes after the potential \item
\newrobustcmd{\ezlib@ezlist@go}[3]{%
  \defcounter{ezlib@ezlist@diff}{\value{ezlib@ezlist@this} - \value{ezlib@ezlist@prev}}%
  \ifboolexpr{%
    togl{ezlib@ezlist@prevempty}
    and not test{\ifnumcomp{\value{ezlib@ezlist@diff}}{=}{0}}
  }{%
    % We're about to end a list without any \item, so add one
    \item%
  }{}%
  % Set the outer current environment (see cleveref labels below)
  \ifdefempty{\ezlib@ezlist@currenvir}{%
    \let\ezlib@ezlist@currenvir\@currenvir%
  }{}%
  % Begin any necessary lists
  \whileboolexpr{ test{\ifnumcomp{\value{ezlib@ezlist@diff}}{>}{1}} }{%
    \addtocounter{ezlib@ezlist@diff}{-1}%
    \begin{ezlist}[before=\@nmbrlistfalse]%
    \item%
  }%
  % Apply any parameters to the innermost new list
  \ifnumcomp{\value{ezlib@ezlist@diff}}{=}{1}{%
    \addtocounter{ezlib@ezlist@diff}{-1}%
    \expandafter\begin\ezlib@ezlist@type%
  }{}%
  % End any necessary lists
  \whileboolexpr{ test{\ifnumcomp{\value{ezlib@ezlist@diff}}{<}{0}} }{%
    \addtocounter{ezlib@ezlist@diff}{1}%
    \end{ezlist}%
  }%
  \ifnumcomp{\value{ezlib@ezlist@this}}{=}{0}{%
    \renewcommand{\ezlib@ezlist@currenvir}{}%
    \ezlib@ezlist@cleanup#1#3%
  }{%
    \ezlib@ezlist@cleanup#1#2#3%
  }%
}

\newrobustcmd{\ezlib@ezlist@cleanup}{%
  \setcounter{ezlib@ezlist@prev}{\value{ezlib@ezlist@this}}%
  \setcounter{ezlib@ezlist@this}{1}%
  \togglefalse{ezlib@ezlist@prevempty}%
}


%%% Testing for environment end after \*/

\newrobustcmd{\ezlib@ezlist@ifAtEnd}[3]{%
  \@ifnextchar{\end}{%
    \ezlib@noezlist@ifAtEnd@go{#1}{#2}{#3}%
  }{
    \@ifnextchar{\*}{%
      \ezlib@ezlist@ifAtEnd@go{#1}{#2}{#3}%
    }{%
      #3%
    }%
  }%
}
\def\ezlib@ezlist@ifAtEnd@go#1#2#3\*#4{%
  \ifstrequal{/}{#4}{%
    \ezlib@noezlist@ifAtEnd{#1}{#2\*#4}{#3\*#4}%
  }{%
    #3\*#4%
  }%
}

\def\ezlib@ifAtEnd{\ezlib@ezlist@ifAtEnd}


%%% Implementation of subenv

\ifbool{ezlib@ezlistsubenv}{


  % Introduce enumitem key "subenv" for smarter labels with cleveref
  % Though also affects normal references

  \newcommand{\ezlib@ezlist@currenvir}{}

  \ifbool{ezlib@cleveref}{
    % Holds current environment outside easylist
    \newrobustcmd{\ezlib@ezlist@label}[2][]{%
      {%
        \protected@edef\cref@currentlabel{%
          [\@tempa][\arabic{ezlisti}][\ezlib@crefPrefix]\subenvFormatRef{ezlisti}%
        }
        \edef\@currentlabel{\subenvFormatRef{ezlisti}}%
        \ezlib@ezlist@old@label{sub@#2}%
      }%
      \ifstrempty{#1}{%
        \ezlib@ezlist@old@label[\ezlib@ezlist@currenvir]{#2}%
      }{%
        \ezlib@ezlist@old@label[#1]{#2}%
      }%
    }
  }{
    \newrobustcmd{\ezlib@ezlist@label}[1]{%
      {%
        \edef\@currentlabel{\subenvFormatRef{ezlisti}}%
        \ezlib@ezlist@old@label{sub@#1}%
      }%
      \ezlib@ezlist@old@label{#1}%
    }
  }

  \newrobustcmd{\ezlib@ezlist@subenv}{%
    \let\ezlib@ezlist@old@label\label
    \renewcommand{\label}{\ezlib@ezlist@label}%
  }

  \newcommand{\subenvFont}{}%
  \newcommand{\subenvFormatLabel}[1]{(\alph{#1})}%
  \newcommand{\subenvFormatRef}{\subenvFormatLabel}%
  \SetEnumitemKey{subenv}{
    label=\subenvFormatLabel*,
    ref=\csuse{the\ezlib@ezlist@currenvir}\subenvFormatRef*,
    before*=\ezlib@ezlist@subenv,
    font=\subenvFont
  }


}{} % \ifbool{ezlib@ezlistsubenv}


%%% General list settings

\setlist{nosep}
\setlist[description]{font=\normalfont\scshape, labelsep=0.75em}

\SetEnumitemKey{afterheading}{
  beginpenalty=10000,
  before*=\leavevmode
}


\fi % \ifezlib@ezlist


%%%%%%%%%%%%%%%%%%%%%
%%% Feature: ezeq %%%
%%%%%%%%%%%%%%%%%%%%%

\ifezlib@ezeq


%%% Implementation of \[ \]

\newrobustcmd{\ezeqSetNumberAll}{\ezlib@ezeq@set{}{}}
\newrobustcmd{\ezeqSetNumberLabeled}{%
  % Implementation of \ezlib@label@in@display is below
  \ezlib@ezeq@set{*}{\cslet{\ezlib@label@macro}\ezlib@label@in@display}%
}

% Not sure why we need \unskip both here and in \ezlib@ezeq@go
\ifbool{ezlib@ezeqautoqed}{
  \def\[#1\]{%
    \ifbool{vmode}{}{\unskip}%
    \ezlib@ifAtEndProof{\ezlib@ezeq@go{#1}{\qedhere}}{\ezlib@ezeq@go{#1}{}}%
  }
}{
  \def\[#1\]{\ifbool{vmode}{}{\unskip}\ezlib@ezeq@go{#1}{}}
}

\newrobustcmd{\noAutoQed}{}

\newrobustcmd{\ezlib@ezeq@set}[2]{%
  % Not sure why we need \unskip both here and in \[ \]
  \def\ezlib@ezeq@go##1##2{%
    % Not sure why we need this \unskip to....
    \ifbool{vmode}{}{\unskip}%
    \begingroup%
    #2%
    \def\ezlib@ezeq@qedhereMaybe{##2}
    \saveexpandmode\noexpandarg%
    \IfSubStr{##1}{\allowdisplaybreaks}{\allowdisplaybreaks}{}%
    \IfSubStr{##1}{\qedhere}{\def\ezlib@ezeq@qedhereMaybe{}}{}%
    \IfSubStr{##1}{\noAutoQed}{\def\ezlib@ezeq@qedhereMaybe{}}{}%
    \IfSubStr{##1}{&}{%
      \restoreexpandmode\begin{align#1}##1\ezlib@ezeq@qedhereMaybe\end{align#1}%
    }{%
      \IfSubStr{##1}{\\}{%
        \restoreexpandmode\begin{gather#1}##1\ezlib@ezeq@qedhereMaybe\end{gather#1}%
      }{%
        \restoreexpandmode\begin{equation#1}##1\ezlib@ezeq@qedhereMaybe\end{equation#1}%
      }%
    }%
    \endgroup%
    \ignorespaces%
  }%
}


%%% Helpers for implementation of \[ \] when numbering only labeled

\ifbool{ezlib@cleveref}{
  \newcommand{\ezlib@label@macro}{cref@old@label@in@display}
}{
  \newcommand{\ezlib@label@macro}{label@in@display}
}

\AtBeginDocument{%
  \letcs\ezlib@old@label@in@display{\ezlib@label@macro}%
}

\newrobustcmd{\ezlib@label@in@display}[1]{%
  \ezlib@old@label@in@display{#1}%
  \@ifnextchar{\tag}{}{\yesnumber}%
}


%%% Choosing whether to number labeled or all

\ifbool{ezlib@ezeqnumberlabeled}{
  \ezeqSetNumberLabeled
}{
  \ezeqSetNumberAll
}


%%% Implement \yesnumber without cleveref compatibility

\newrobustcmd{\ezlib@yesnumber@nocleveref}{%
  \refstepcounter{equation}%
  \tag{\theequation}%
}


%%% Implement \yesnumber with cleveref compatibility

% See https://tex.stackexchange.com/questions/545726/labelcref-doesnt-like-my-user-defined-command
% Change from link: "[equation][\theequation][]" -> "[equation][\arabic{equation}][\ezlib@crefPrefix]"

\newrobustcmd*{\ezlib@make@df@tag@@}[1]{%
  \cref@old@make@df@tag@@{#1}%
  \let\ezlib@old@df@tag\df@tag
  \expandafter\gdef\expandafter\df@tag\expandafter{%
    \ezlib@old@df@tag
    \def\cref@currentlabel{[equation][\arabic{equation}][\ezlib@crefPrefix]#1}%
  }%
}

\newrobustcmd*{\ezlib@make@df@tag@@@}[1]{%
  \cref@old@make@df@tag@@@{#1}%
  \let\ezlib@old@df@tag\df@tag
  \expandafter\gdef\expandafter\df@tag\expandafter{%
    \ezlib@old@df@tag
    \toks@\@xp{\p@equation{#1}}%
    \edef\cref@currentlabel{[equation][\arabic{equation}][\ezlib@crefPrefix]\the\toks@}%
  }%
}

\newrobustcmd{\ezlib@yesnumber@cleveref}{%
  \begingroup%
    \refstepcounter{equation}%
    \let\make@df@tag@@\ezlib@make@df@tag@@
    \let\make@df@tag@@@\ezlib@make@df@tag@@@
    \tag{\theequation}%
  \endgroup%
}

\ifbool{ezlib@cleveref}{
  \newrobustcmd{\yesnumber}{\ezlib@yesnumber@cleveref}
}{
  \newrobustcmd{\yesnumber}{\ezlib@yesnumber@nocleveref}
}


%%% Try to fix \qedhere

% If tags are on the right, just use a tag
% If tags are on the left... do whatever hacks are already in place
\ifbool{tagsleft@}{}{
  \def\align@qed{\tag*{\qedsymbol}}
  \csdef{align*@qed}{\tag*{\qedsymbol}}
  \def\alignat@qed{\tag*{\qedsymbol}}
  \csdef{alignat*@qed}{\tag*{\qedsymbol}}
}{}


\fi % \ifezlib@ezeq


%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Feature: ezrestate %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%

\ifezlib@ezrestate


%%% Declaring restatables

\newtoks\ezlib@ezrestate@collect@toks

% Variant of \thmt@collect@body
% Collects until \end{env} instead of the end of the current environment
\long\def\ezlib@ezrestate@collect@body@of#1#2#3\end#4{%
  \expandafter\ezlib@ezrestate@collect@toks\expandafter{\the\ezlib@ezrestate@collect@toks #3}%
  \ifstrequal{#1}{#4}{%
    \expandafter#2\expandafter{\the\ezlib@ezrestate@collect@toks}%
  }{%
    \expandafter\ezlib@ezrestate@collect@toks\expandafter{\the\ezlib@ezrestate@collect@toks\end{#4}}%
    \ezlib@ezrestate@collect@body@of{#1}{#2}%
  }%
}

\ifdef{\restatably}{%
  \PackageError{ezlib}{%
    Command \restatably already defined, being overwritten%
  }{}%
}{}

\newrobustcmd{\restatably}{%
  \@ifstar{%
    \ezlib@restatably@checkopt*%
  }{%
    \ezlib@restatably@checkopt{}%
  }%
  % \@ifstar{%
  %   \ezlib@restatably@checkopt*%
  %   \ignorespaces%
  % }{%
  %   \ezlib@restatably@checkopt\relax%
  %   \ignorespaces%
  % }%
}

% #1 is * or {}
% #2 should be only spaces
\def\ezlib@restatably@checkopt#1#2\begin#3{%
  \@ifnextchar[{%
    \ezlib@restatably@go{#1}{#3}%
  }{%
    \ezlib@restatably@go{#1}{#3}[]%
  }%
}

\def\ezlib@restatably@go#1#2[#3]#4#5{%
  \ifdefequal{#4}{\label}{%
    \ezlib@ezrestate@collect@toks{}%
    \ifstrempty{#3}{%
      \long\def\ezlib@ezrestate@collect@cont##1{%
        \begin{restatable#1}{#2}{ezlib@restate #5}%
          \label{#5}%
          % Need this or else `\ezlib@ezlist@currenvir` gets set to "restatable"
          % Putting here so the definition is local
          \def\ezlib@ezlist@currenvir{#2}%
          ##1%
        \end{restatable#1}%
      }%
    }{%
      \long\def\ezlib@ezrestate@collect@cont##1{%
        \begin{restatable#1}[#3]{#2}{ezlib@restate #5}%
          \label{#5}%
          % Need this or else `\ezlib@ezlist@currenvir` gets set to "restatable"
          % Putting here so the definition is local
          \def\ezlib@ezlist@currenvir{#2}%
          ##1%
        \end{restatable#1}%
      }%
    }%
    \csxappto{ezlib@restate@all ezlib@region@\csuse{the\ezlib@numberwithin} ezlib@env@#2}{%
      \noexpand\ezlib@restateAll@cont{#5}%
    }%
    \ezlib@ezrestate@collect@body@of{#2}\ezlib@ezrestate@collect@cont%
  }{%
    \PackageError{ezlib}{%
      Environment after \restatably must start with a \label%
    }{}%
  }%
}


%%% Restating restatables

\newrobustcmd{\restate}{%
  \@ifstar{%
    \ezlib@restate@checkref*%
  }{%
    \ezlib@restate@checkref{}%
  }%
}

\newrobustcmd{\ezlib@restate@checkref}[1]{%
  \@ifnextchar\ref{%
    \ezlib@restate@go#1%
  }{%
    \ezlib@restate@go#1\ref%
  }%
}

% #1 is empty or *
% #2 is the label we want to restate
\def\ezlib@restate@go#1\ref#2{%
  \ifcsdef{ezlib@restate #2}{%
    \csuse{ezlib@restate #2}#1%
  }{%
    \PackageError{ezlib}{%
      Attempted to restate undeclared theorem with label #2%
    }{}%
  }%
}


%%% Restating all restatables of a certain environment

\newrobustcmd{\restateAll}[1][]{%
  \@ifstar{\ezlib@restateAll@go{#1}{\restate*}}{\ezlib@restateAll@go{#1}{\restate}}%
}

\newrobustcmd{\clearRestateAll}[1]{%
  \csgdef{ezlib@restate@all ezlib@region@\csuse{the\ezlib@numberwithin} ezlib@env@#1}{}%
}

\newrobustcmd{\ezlib@restateAll@go}[3]{%
  \begingroup%
    \def\ezlib@restateAll@cont{#2}%
    % Putting / in the macro seems to work to control space inside `\csuse`
    % In contrast, just putting {} after the usage seems not to work
    \ifblank{#1}{%
      \edef\ezlib@restateAll@region/{\csuse{the\ezlib@numberwithin}}%
    }{%
      \edef\ezlib@restateAll@region/{\getrefnumber{#1}}%
    }%
    \csuse{ezlib@restate@all ezlib@region@\ezlib@restateAll@region/ ezlib@env@#3}%
  \endgroup%
}


%%% Fixing a spacing bug in restatable environment

\pretocmd{\thmt@rst@storecounters}{\Hy@SaveLastskip}{}{}
\apptocmd{\thmt@rst@storecounters}{\Hy@RestoreLastskip}{}{}


\fi % \ifezlib@ezrestate


%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Feature: delimiters %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%% Main delimiter macros

\ifbool{ezlib@delimiters}{
  \DeclarePairedDelimiterX{\pgp}[1](){#1}
  \DeclarePairedDelimiterX{\bgp}[1][]{#1}
  \DeclarePairedDelimiterX{\Bgp}[1]\{\}{#1}
  \DeclarePairedDelimiterX{\pbgp}[1](]{#1}
  \DeclarePairedDelimiterX{\bpgp}[1][){#1}
  \DeclarePairedDelimiterX{\agp}[1]\langle\rangle{#1}
  \DeclarePairedDelimiterX{\vgp}[1]\lvert\rvert{#1}
  \DeclarePairedDelimiterX{\Vgp}[1]\lVert\rVert{#1}
  \DeclarePairedDelimiterX{\floor}[1]\lfloor\rfloor{#1}
  \DeclarePairedDelimiterX{\ceil}[1]\lceil\rceil{#1}
  \let\gp\pgp
  \let\sqgp\bgp
  \let\curlgp\Bgp
}{}


%%% Generic version that only supports default and automatic sizing

\ifboolexpr{ bool{ezlib@delimiters} or bool{ezlib@notation} }{
  \newcommand{\delimsize}{}
  \renewrobustcmd{\mid}{\nonscript\;\delimsize\vert\nonscript\;\mathopen{}}
  \newrobustcmd{\Mid}{\nonscript\;\delimsize\Vert\nonscript\;\mathopen{}}
  \newrobustcmd{\lr}{%
    \@ifstar{\ezlib@lr@star}{\ezlib@lr@nostar}%
  }
  \newrobustcmd{\lrStarAfter}[2]{%
    \@ifstar{\ezlib@lr@star{#1}{#2}}{\ezlib@lr@nostar{#1}{#2}}%
  }
  \newrobustcmd{\ezlib@lr@star}[3]{%
    \mathopen{}\mathclose\bgroup\left #1
    \renewcommand{\delimsize}{\middle} #3
    \aftergroup\egroup\right #2
  }
  \newrobustcmd{\ezlib@lr@nostar}[3]{%
    \mathopen #1
    #3
    \mathclose #2
  }
}{}


%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Feature: notation %%%
%%%%%%%%%%%%%%%%%%%%%%%%%

\ifezlib@notation


%%% Shortcuts for \mathbb and \mathcal, e.g. \calP and \bbQ

\LoopCommands{\lettersUppercase}[bb#1]{
  \newmathcommand{#2}{\mathbb{#1}}
}

\LoopCommands{\lettersUppercase}[cal#1]{
  \newmathcommand{#2}{\mathcal{#1}}
}

\LoopCommands{\lettersAll}[bf#1]{
  \newmathcommand{#2}{\mathbf{#1}}
}

\LoopCommands{\lettersAll}[sf#1]{
  \newmathcommand{#2}{\mathsf{#1}}
}


%%% Probability

\letcs\ezlib@probability@mathfont{math\ezlib@probabilitystyle}

\ifcsdef{\ezlib@probabilitydelimiter gp}{
  \letcs\ezlib@probability@gp{\ezlib@probabilitydelimiter gp}
}{
  \ifdefstring{\ezlib@probabilitydelimiter}{p}{
    \renewcommand{\ezlib@probabilitydelimiter}{()}
  }{}
  \ifdefstring{\ezlib@probabilitydelimiter}{b}{
    \renewcommand{\ezlib@probabilitydelimiter}{[]}
  }{}
  \ifdefstring{\ezlib@probabilitydelimiter}{B}{
    \renewcommand{\ezlib@probabilitydelimiter}{\{\}}
  }{}
  \ifdefstring{\ezlib@probabilitydelimiter}{sq}{
    \renewcommand{\ezlib@probabilitydelimiter}{[]}
  }{}
  \ifdefstring{\ezlib@probabilitydelimiter}{curl}{
    \renewcommand{\ezlib@probabilitydelimiter}{\{\}}
  }{}
  \edef\ezlib@probability@gp{\noexpand\lrStarAfter\ezlib@probabilitydelimiter}
}

\newcommand{\DeclareProbabilityCommand}[2]{
  \declaremathcommandPIE{#1}{%
    \ezlib@probability@mathfont{#2}##1##2##3\ezlib@probability@gp%
  }
}

\DeclareProbabilityCommand{\P}{P}
\DeclareProbabilityCommand{\E}{E}
\DeclareProbabilityCommand{\Var}{Var}

\let\given\mid


%%% Other

\declarecommand{\epsilon}{\varepsilon}
\declarecommand{\phi}{\varphi}

\newmathcommand{\1}{\mathbb{1}}

\undef\argmin
\DeclareMathOperator*{\argmin}{arg\,min}
\undef\argmax
\DeclareMathOperator*{\argmax}{arg\,max}

\declaremathcommand{\d}{\mathop{}\!\mathrm{d}}

% See https://tex.stackexchange.com/questions/16337/can-i-get-a-widebar-without-using-the-mathabx-package
\ifdef{\widebar}{}{%

% More space on left because most math is italic.
\let\save@mathaccent\mathaccent
\newcommand*\if@single[3]{%
  \setbox0\hbox{${\mathaccent"0362{#1}}^H$}%
  \setbox2\hbox{${\mathaccent"0362{\kern0pt#1}}^H$}%
  \ifdim\ht0=\ht2 #3\else #2\fi}
% The bar will be moved to the right by a half of \macc@kerna,
% which is computed by amsmath:
\newcommand*\rel@kern[1]{\kern#1\dimexpr\macc@kerna}
% If there's a superscript following the bar,
% then no negative kern may follow the bar;
% an additional {} makes sure that the superscript is high enough in this case:
\newcommand*\widebar[1]{\@ifnextchar^{{\wide@bar{#1}{0}}}{\wide@bar{#1}{1}}}
% Use a separate algorithm for single symbols:
\newcommand*\wide@bar[2]{%
  \if@single{#1}{\wide@bar@{#1}{#2}{1}}{\wide@bar@{#1}{#2}{2}}}
\newcommand*\wide@bar@[3]{%
  \begingroup
  \def\mathaccent##1##2{%
    % Enable nesting of accents:
    \let\mathaccent\save@mathaccent
    % If there's more than a single symbol,
    % use the first character instead (see below):
    \if#32 \let\macc@nucleus\first@char \fi
    % Determine the italic correction:
    \setbox\z@\hbox{$\macc@style{\macc@nucleus}_{}$}%
    \setbox\tw@\hbox{$\macc@style{\macc@nucleus}{}_{}$}%
    \dimen@\wd\tw@
    \advance\dimen@-\wd\z@
    % Now \dimen@ is the italic correction of the symbol.
    \divide\dimen@ 3
    \@tempdima\wd\tw@
    \advance\@tempdima-\scriptspace
    % Now \@tempdima is the width of the symbol.
    \divide\@tempdima 10
    \advance\dimen@-\@tempdima
    % Now \dimen@ = (italic correction / 3) - (Breite / 10)
    \ifdim\dimen@>\z@ \dimen@0pt\fi
    % The bar will be shortened in the case \dimen@<0 !
    \rel@kern{0.6}\kern-\dimen@
    \if#31
      \overline{%
        \rel@kern{-0.6}\kern\dimen@\macc@nucleus\rel@kern{0.4}\kern\dimen@}%
      \advance\dimen@0.4\dimexpr\macc@kerna
      % Place the combined final kern (-\dimen@)
      % if it is >0 or if a superscript follows:
      \let\final@kern#2%
      \ifdim\dimen@<\z@ \let\final@kern1\fi
      \if\final@kern1 \kern-\dimen@\fi
    \else
      \overline{\rel@kern{-0.6}\kern\dimen@#1}%
    \fi
  }%
  \macc@depth\@ne
  \let\math@bgroup\@empty \let\math@egroup\macc@set@skewchar
  \mathsurround\z@ \frozen@everymath{\mathgroup\macc@group\relax}%
  \macc@set@skewchar\relax
  \let\mathaccentV\macc@nested@a
  % The following initialises \macc@kerna and calls \mathaccent:
  \if#31
    \macc@nested@a\relax111{#1}%
  \else
  % If the argument consists of more than one symbol,
  % and if the first token is a letter,
  % use that letter for the computations:
    \def\gobble@till@marker##1\endmarker{}%
    \futurelet\first@char\gobble@till@marker#1\endmarker
    \ifcat\noexpand\first@char A\else
      \def\first@char{}%
    \fi
    \macc@nested@a\relax111{\first@char}%
  \fi
  \endgroup}
}

\fi % \ifezlib@notation


%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Feature: cleveref %%%
%%%%%%%%%%%%%%%%%%%%%%%%%

\ifezlib@cleveref


%%% Patches

% Allow spaces between labels in \cref and \Cref
% (This is an egreg stackexchange answer)
\ExplSyntaxOn
\cs_set_eq:Nc \bers_cref:nn { @cref }
\cs_generate_variant:Nn \bers_cref:nn { nx }
\cs_set_protected:cpn { @cref } #1 #2
 {
  \seq_set_split:Nnn \l_bers_cref_seq { , } { #2 }
  \bers_cref:nx { #1 } { \seq_use:Nn \l_bers_cref_seq { , } }
 }
\seq_new:N \l_bers_cref_seq
\ExplSyntaxOff


%%% Assigning cleveref names

\newrobustcmd{\cCrefname}[3]{%
  \crefname{#1}{#2}{#3}%
  \Crefname{#1}{#2}{#3}%
}

% Short names for references (e.g. Thm. instead of Theorem)
\newcommand{\crefShorten}{}
\newrobustcmd{\crefShortened}[1]{\appto{\crefShorten}{#1}}


%%% Typical names

% Use section symbol when names are shortened
\crefShortened{\crefname{section}{\textsection}{\textsection\textsection}}
\crefShortened{\crefname{paragraph}{\textparagraph}{\textparagraph\textparagraph}}
% Don't need subsection, subsubsection, or subparagraph thanks to aliases

% Conjunctions
\newcommand{\crefrangeconjunction}{--}
\newcommand{\creflastconjunction}{, and~}

\crefname{equation}{}{}
\Crefname{equation}{Equation}{Equations}
\crefShortened{\Crefname{equation}{Eq.}{Eqs.}}

\newrobustcmd{\ezlib@enum@cCrefname}[1]{%
  \crefname{#1}{}{}%
  \Crefname{#1}{Item}{Items}%
}

\crefname{figure}{Figure}{Figures}
\crefShortened{\cCrefname{figure}{Fig.}{Figs.}}
\crefname{table}{Table}{Tables}
\crefShortened{\cCrefname{table}{Tab.}{Tabs.}}

%-- compatibility: acmart --%
\@ifclassloaded{acmart}{
  \crefname{figure}{Fig.}{Figs.}
}{}
%-- end compatibility --%

\ezlib@enum@cCrefname{enumi}
\ezlib@enum@cCrefname{enumii}
\ezlib@enum@cCrefname{enumiii}
\ezlib@enum@cCrefname{enumiv}
\ezlib@enum@cCrefname{enumv}
\ezlib@enum@cCrefname{enumvi}
\ezlib@enum@cCrefname{enumvii}
\ezlib@enum@cCrefname{enumviii}

\ifbool{ezlib@ezlist}{
  \ezlib@enum@cCrefname{ezlisti}
  \ezlib@enum@cCrefname{ezlistii}
  \ezlib@enum@cCrefname{ezlistiii}
  \ezlib@enum@cCrefname{ezlistiv}
  \ezlib@enum@cCrefname{ezlistv}
  \ezlib@enum@cCrefname{ezlistvi}
  \ezlib@enum@cCrefname{ezlistvii}
  \ezlib@enum@cCrefname{ezlistviii}
}


\fi % \ifezlib@cleveref


%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Feature: theorems %%%
%%%%%%%%%%%%%%%%%%%%%%%%%

\ifezlib@theorems


\newcommand{\ezlib@thmstyle@plain}{plain}
\newcommand{\ezlib@thmstyle@definition}{definition}
\newcommand{\ezlib@thmstyle@remark}{remark}
\newcommand{\ezlib@thmstyle@case}{remark}

%-- compatibility: acmart --%
\@ifclassloaded{acmart}{
  \renewcommand{\ezlib@thmstyle@plain}{acmplain}
  \renewcommand{\ezlib@thmstyle@definition}{acmdefinition}
  \renewcommand{\ezlib@thmstyle@remark}{acmdefinition}
  \newtheoremstyle{acmcase}
    {.5\baselineskip\@plus.2\baselineskip\@minus.2\baselineskip}
    {.5\baselineskip\@plus.2\baselineskip\@minus.2\baselineskip}
    {\@acmdefinitionbodyfont}
    {\@acmdefinitionindent}
    {\@acmdefinitionheadfont}
    {.}
    {.5em}
    {\thmname{#1}\thmnumber{ #2}\thmnote{{\@acmdefinitionnotefont: #3}}}
  \renewcommand{\ezlib@thmstyle@case}{acmcase}
}{}
%-- end compatibility --%

\providecommand{\ezlibPlain}{\ezlib@thmstyle@plain}
\providecommand{\ezlibDefinition}{\ezlib@thmstyle@definition}
\providecommand{\ezlibRemark}{\ezlib@thmstyle@remark}

\theoremstyle{\ezlibPlain}
\ifdefempty{\ezlib@numberwithin}{
  \newtheorem{theorem}{Theorem}
}{
  \newtheorem{theorem}{Theorem}[\ezlib@numberwithin]
}
\crefShortened{\cCrefname{theorem}{Thm.}{Thms.}}
\newtheorem{lemma}[theorem]{Lemma}
\crefShortened{\cCrefname{lemma}{Lem.}{Lems.}}
\newtheorem{corollary}[theorem]{Corollary}
\crefShortened{\cCrefname{corollary}{Cor.}{Cors.}}
\newtheorem{proposition}[theorem]{Proposition}
\crefShortened{\cCrefname{proposition}{Prop.}{Props.}}

\theoremstyle{\ezlibDefinition}
\newtheorem{definition}[theorem]{Definition}
\crefShortened{\cCrefname{definition}{Def.}{Defs.}}
\newtheorem{example}[theorem]{Example}
\crefShortened{\cCrefname{example}{Ex.}{Exs.}}
\newtheorem{observation}[theorem]{Observation}
\cCrefname{observation}{Observation}{Observations}
\crefShortened{\cCrefname{observation}{Obs.}{Obss.}}
\newtheorem{assumption}[theorem]{Assumption}
\cCrefname{assumption}{Assumption}{Assumptions}
\crefShortened{\cCrefname{assumption}{Asm.}{Asms.}}
\newtheorem{notation}[theorem]{Notation}
\cCrefname{notation}{Notation}{Notations}
\crefShortened{\cCrefname{notation}{Ntn.}{Ntns.}}

\theoremstyle{\ezlibRemark}
\newtheorem{remark}[theorem]{Remark}
\crefShortened{\cCrefname{remark}{Rmk.}{Rmks.}}
\newtheorem{note}[theorem]{Note}

\theoremstyle{\ezlib@thmstyle@case}
\newtheorem{case}{Case}
\cCrefname{case}{Case}{Cases}
% Use a colon instead of parentheses for names of cases
\ifdefstring{\ezlib@thmstyle@case}{remark}{
  \newcommand{\ezlib@thmhead@case}[3]{\thmname{#1}\thmnumber{ #2}\thmnote{: #3}}
  \pretocmd{\case}{\let\thmhead\ezlib@thmhead@case}{}{}
}{}

% Reset to default style
\theoremstyle{\ezlibPlain}

\let\ezlib@qed\qed
\newcommand{\noqed}{\renewcommand{\qed}{}}

% Reset case counter and QED symbol at start of each proof
\pretocmd{\proof}{%
  \setcounter{case}{0}%
  \renewcommand{\qed}{\ezlib@qed}%
}{}{}

% Undefine a theorem environment, e.g. to redefine it with a different style
\newcommand{\cleartheorem}[1]{%
  \csundef{#1}%
  \csundef{c@#1}%
}


\fi % \ifezlib@theorems


%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Feature: headings %%%
%%%%%%%%%%%%%%%%%%%%%%%%%

\ifdefstring{\ezlib@headings}{default}{
  \ifboolexpr{
    test{\@ifclassloaded{article}}
    or test{\@ifclassloaded{book}}
    or test{\@ifclassloaded{report}}
  }{
    \renewcommand{\ezlib@headings}{fancy}
  }{
    \renewcommand{\ezlib@headings}{none}
  }
}{}

\ifdefstring{\ezlib@headings}{inline}{
  \renewcommand{\ezlib@headings}{fancy}
  \setbool{ezlib@headingsinline}{true}
}


%%% Common to fancy and inline headings

\newcommand{\ezlib@titlestyle}{\bfseries}
\newcommand{\ezlib@subtitlestyle}{}
\newcommand{\ezlib@titlestyleoptions}{bf}
\newcommand{\ezlib@headerstyle}{\footnotesize}

% Used in inline headings only by default to end them with a period
% First macro copied from amsgen (part of amsmath)
\def\ezlib@addpunct#1{\ifnum\spacefactor>\@m \else#1\fi}
\def\ezlib@addpunctafter#1#2{\ifblank{#2}{}{#2\ezlib@addpunct{#1}}}


\ifdefstring{\ezlib@headings}{fancy}{


\ifbool{ezlib@headings@sf}{
  \renewcommand{\ezlib@titlestyle}{\sffamily\bfseries}
  \renewcommand{\ezlib@subtitlestyle}{\sffamily}
  \renewcommand{\ezlib@titlestyleoptions}{sf,bf}
  \renewcommand{\ezlib@headerstyle}{\footnotesize\sffamily}
}{}

\ezlib@RequirePackageWithOptions{\ezlib@titlestyleoptions, raggedright}{titlesec}
\ezlib@RequirePackage{fancyhdr}
\ezlib@RequirePackage{titling}

\newcommand{\ezlib@nonewlines}[1]{{\def\\{\unskip\ \ignorespaces}#1}}

\AtBeginDocument{\patchcmd{\abstract}{\bfseries}{\ezlib@titlestyle}{}{}}

\@ifpackageloaded{microtype}{
  \newrobustcmd{\ezlib@noMicrotypeProtrusion}{\microtypesetup{protrusion=false}}
}{
  \newrobustcmd{\ezlib@noMicrotypeProtrusion}{}
}

\titleformat{\part}[display]%
  {\centering\normalfont\LARGE\scshape}%
  {Part~\thepart}%
  {0.5em}%
  {\ezlib@noMicrotypeProtrusion\hyphenpenalty=10000\centering\normalfont\HUGE\ezlib@titlestyle}%

\titlespacing*{\chapter}{0pt}{-4.25em}{2em plus 0.5em minus 0.5em}
\newlength{\chapterrulewidth}
\setlength{\chapterrulewidth}{\headrulewidth}
\titleformat{\chapter}[display]%
  {\normalfont\Large\scshape}%
  {\chaptername~\thechapter}%
  {0.125em}%
  {\hyphenpenalty=10000\raggedright\normalfont\huge\ezlib@titlestyle}%
  [\rule{\linewidth}{\chapterrulewidth}]

\@ifclassloaded{book}{%
  \newcommand{\ezlib@titlesize}{\huge}%
}{%
  \newcommand{\ezlib@titlesize}{\LARGE}%
}

\newcommand{\ezlib@shorttitle}{}
\let\ezlib@old@title\title
\renewcommand{\title}[2][]{%
  \renewcommand{\ezlib@shorttitle}{#1}%
  \ezlib@old@title{#2}}

\newcommand{\ezlib@shortauthor}{}
\let\ezlib@old@author\author
\renewcommand{\author}[2][]{%
  \renewcommand{\ezlib@shortauthor}{#1}%
  \ezlib@old@author{#2}}

\pretitle{%
  \vspace{-3.75\baselineskip}%
  \begin{center}
    % Protrusion can mess up centering slightly on first line of title
    \ezlib@noMicrotypeProtrusion%
    \hyphenpenalty=10000%
    \ezlib@titlestyle\ezlib@titlesize%
}
\posttitle{\par\end{center}}
\preauthor{\begin{center}\begin{tabular}[t]{c}}
\postauthor{\end{tabular}\par\end{center}}
\predate{\ifdefempty{\thedate}{}{\begin{center}}}
\postdate{\ifdefempty{\thedate}{}{\par\end{center}}}

\date{}

\let\ezlib@old@maketitle\maketitle
\def\ezlib@thetitle{}
\def\ezlib@theauthor{}

\newcommand{\inittitleauthor}{%
  \ifdefempty{\ezlib@shorttitle}{%
    \def\ezlib@titlenonewlines{\ezlib@nonewlines{\@title}}%
    \global\let\ezlib@thetitle\ezlib@titlenonewlines%
  }{%
    \global\let\ezlib@thetitle\ezlib@shorttitle%
  }%
  \ifdefempty{\ezlib@shortauthor}{%
    \def\ezlib@authornonewlines{\ezlib@nonewlines{\@author}}%
    \global\let\ezlib@theauthor\ezlib@authornonewlines%
  }{%
    \global\let\ezlib@theauthor\ezlib@shortauthor%
  }%
}

\renewcommand{\maketitle}{%
  \inittitleauthor%
  \ezlib@old@maketitle%
  \thispagestyle{plain}%
  \vspace{-2\baselineskip}%
}

\fancypagestyle{plain}{%
  \fancyhf{}%
  \fancyfoot[C]{\ezlib@headerstyle\thepage}%
  \renewcommand{\headrulewidth}{0pt}%
}

\pagestyle{fancy}
\fancyhf{}

\@ifclassloaded{book}{%
  \renewcommand{\chaptermark}[1]{%
    \markboth{\ifbool{@mainmatter}{\chaptername~\thechapter\kern0.75em}{}#1}{}%
  }
  \renewcommand{\sectionmark}[1]{%
    \markright{\thesection\kern0.75em#1}%
  }
  \fancyhead[RE]{\ezlib@headerstyle\nouppercase\leftmark}%
  \fancyhead[LO]{\ezlib@headerstyle\nouppercase\rightmark}%
  \fancyhead[LE, RO]{\ezlib@headerstyle\thepage}%
}{%
  \fancyhead[L]{\ezlib@headerstyle\ezlib@thetitle}%
  \fancyhead[R]{\ezlib@headerstyle{\def\and{\unskip, }\ezlib@theauthor}}%
  \fancyfoot[C]{\ezlib@headerstyle\thepage}%
}


}{} % \ifdefstring{\ezlib@headings}{fancy}


%%% Specific to inline headings

\newcommand{\ezlib@headingsinline@numtitlesep}{2em/3}
\newcommand{\ezlib@headingsinline@titletextsep}{3em/4}
\newcommand{\ezlib@headingsinline@period}{\ezlib@addpunctafter{.}}
\ifbool{ezlib@headingsinlineperiod}{}{
  \renewcommand{\ezlib@headingsinline@titletextsep}{1em}
  \renewcommand{\ezlib@headingsinline@period}{}
}

\ifbool{ezlib@headingsinline}{


\ezlib@RequirePackageWithOptions{raggedright}{titlesec}
\ezlib@RequirePackage{noindentafter}

\ifdefstring{\ezlib@headings}{fancy}{
  \fancypagestyle{firstpage}{%
    \fancyhead{}%
    \renewcommand{\headrulewidth}{0pt}%
  }
  \pretitle{\noindent\begingroup\LARGE\ezlib@titlestyle}
  \posttitle{\endgroup\\[\medskipamount]}
  \preauthor{\begingroup\large\ezlib@subtitlestyle}
  \postauthor{\endgroup\\}
  \predate{}
  \postdate{\thispagestyle{firstpage}}
  \renewcommand{\maketitle}{%
    \inittitleauthor%
    {%
      \setlength{\parskip}{0pt}%
      \setlength{\parindent}{0pt}%
      \ezlib@subtitlestyle%
      \ifdefempty{\thetitle}{}{\textbf{\LARGE\thetitle}\par\medskip}%
      \ifdefempty{\theauthor}{}{{\theauthor}\par}%
      \ifdefempty{\thedate}{}{{\thedate}\par}%
    }%
    \noindent%
    \rule{\linewidth}{\headrulewidth}%
    \thispagestyle{firstpage}%
    \NoIndentAfterThis%
  }
}{}

\titleformat{\section}{\normalfont\Large\ezlib@titlestyle}{\thesection}{\ezlib@headingsinline@numtitlesep}{}
\titlespacing*{\section}{0pt}{\bigskipamount}{\medskipamount}
\titleformat{\subsection}[runin]{\normalfont\ezlib@titlestyle}{\thesubsection}{\ezlib@headingsinline@numtitlesep}{\ezlib@headingsinline@period}
\titlespacing*{\subsection}{0pt}{\medskipamount}{\ezlib@headingsinline@titletextsep}
\titleformat{\subsubsection}[runin]{\normalfont\ezlib@subtitlestyle\itshape}{\thesubsubsection}{\ezlib@headingsinline@numtitlesep}{\ezlib@headingsinline@period}
\titlespacing*{\subsubsection}{0pt}{\medskipamount}{\ezlib@headingsinline@titletextsep}

\AtBeginDocument{%
  \@ifpackageloaded{parskip}{%
    \titlespacing*{\section}{0pt}{1.5\parskip}{\parskip}%
    \titlespacing*{\subsection}{0pt}{1.25\parskip}{\ezlib@headingsinline@titletextsep}%
    \titlespacing*{\subsubsection}{0pt}{1.25\parskip}{\ezlib@headingsinline@titletextsep}%
  }{}%
}


}{} % \ifbool{\ezlib@headingsinline}


%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Feature: algorithm %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%

% Not sure why, but there's an error if we use \ifezlib@algorithm ... \fi
% Workaround is to use \ifbool from etoolbox
\ifbool{ezlib@algorithm}{


\ifdefempty{\ezlib@numberwithin}{
  \ezlib@RequirePackage{algorithm}
}{
  \ezlib@RequirePackageWithOptions{\ezlib@numberwithin}{algorithm}
}

\@ifpackageloaded{caption}{
  \captionsetup[algorithm]{labelfont=bf, labelsep=period}

  %-- compatibility: acmart --%
  \@ifclassloaded{acmart}{
    % Sorta match algorithm captions with theorem formatting
    \DeclareCaptionLabelSeparator{acmperiodspace}{.\hspace{0.5em}}
    \captionsetup[algorithm]{labelfont=sc, labelsep=acmperiodspace}
  }{}
  %-- end compatibility --%
}{}

% Make rules in algorithm environment match those of booktabs tables
\renewcommand{\fs@ruled}{%
  \def\@fs@cfont{\bfseries}\let\@fs@capt\floatc@ruled
  \def\@fs@pre{%
    \vspace{\abovetopsep}%
    \hrule height\heavyrulewidth \kern2pt%
    \vspace{\belowrulesep}}%
  \def\@fs@post{%
    \vspace{\aboverulesep}%
    \kern2pt\hrule height\heavyrulewidth \relax%
    \vspace{\belowbottomsep}}%
  \def\@fs@mid{%
    \vspace{\aboverulesep}%
    \kern2pt\hrule height\lightrulewidth \kern2pt%
    \vspace{\belowrulesep}}%
  \let\@fs@iftopcapt\iftrue
}


}{} % \ifbool{ezlib@algorithm}


%%% Feature: mathic %%%

\ifezlib@mathic

\mathtoolsset{mathic}

\ifbool{ezlib@mathicafter}{%
  \newcommand{\ezlib@aftermath}{\ifdefstring{\f@shape}{it}{\kern-\ezlib@mathicafterkern\/}{}}%
}{%
  \newcommand{\ezlib@aftermath}{}%
}%

\begingroup
  \catcode`\$=13
  \gdef$#1${\ifstrempty{#1}{\ezlib@dollardisplay}{\(#1\)\ezlib@aftermath}}%
  \gdef\ezlib@dollardisplay#1$${\[#1\]}%
\endgroup

% Use mathic in the main document (aside from a few environments)...
\AtBeginDocument{%
  \pretocmd{\tikzpicture}{\catcode`\$=3}{}{}%
  \pretocmd{\array}{\catcode`\$=3}{}{}%
  \catcode`\$=13%
}
% ... but reset the category code after
% Otherwise, LaTeX might mistakenly think a label changed due to changing catcodes
% Specifically, captions with inline math cause a problem without this
\AtEndDocument{\catcode`\$=3}


\fi % \ifezlib@mathic
